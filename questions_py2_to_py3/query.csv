query,original_answer
"










Want to improve this post? Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.
                                
                            






What functionality does the yield keyword in Python provide?
For example, I'm trying to understand this code1:
def _get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist < self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist >= self._median:
        yield self._rightchild  

And this is the caller:
result, candidates = [], [self]
while candidates:
    node = candidates.pop()
    distance = node._get_dist(obj)
    if distance <= max_dist and distance >= min_dist:
        result.extend(node._values)
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))
return result

What happens when the method _get_child_candidates is called?
Is a list returned? A single element? Is it called again? When will subsequent calls stop?


1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: Module mspace.
",
"
What does this do, and why should one include the if statement?
if __name__ == ""__main__"":
    print(""Hello, World!"")


If you are trying to close a question where someone should be using this idiom and isn't, consider closing as a duplicate of Why is Python running my module when I import it, and how do I stop it? instead. For questions where someone simply hasn't called any functions, or incorrectly expects a function named main to be used as an entry point automatically, use Why doesn't the main() function run when I start a Python script? Where does the script start running?.
",
"










Want to improve this post? Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.
                                
                            






Is there a ternary conditional operator in Python?
",
"
What are metaclasses? What are they used for?
",
"
How do I check whether a file exists or not, without using the try statement?
",
"
I want to merge two dictionaries into a new dictionary.
x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}
z = merge(x, y)

>>> z
{'a': 1, 'b': 3, 'c': 4}

Whenever a key k is present in both dictionaries, only the value y[k] should be kept.
",
"
How do I call an external command within Python as if I had typed it in a shell or command prompt?
",
"
How do I create a directory at a given path, and also create any missing parent directories along that path? For example, the Bash command mkdir -p /path/to/nested/directory does this.
",
"
How do I access the index while iterating over a sequence with a for loop?
xs = [8, 23, 45]

for x in xs:
    print(""item #{} = {}"".format(index, x))

Desired output:
item #1 = 8
item #2 = 23
item #3 = 45

",
"
I have a list of lists like
[
    [1, 2, 3],
    [4, 5, 6],
    [7],
    [8, 9]
]

How can I flatten it to get [1, 2, 3, 4, 5, 6, 7, 8, 9]?

If your list of lists comes from a nested list comprehension, the problem can be solved more simply/directly by fixing the comprehension; please see How can I get a flat result from a list comprehension instead of a nested list?.
The most popular solutions here generally only flatten one ""level"" of the nested list. See Flatten an irregular (arbitrarily nested) list of lists for solutions that completely flatten a deeply nested structure (recursively, in general).
",
"
What is the difference between a method decorated with @staticmethod and one decorated with @classmethod?
",
"
How does Python's slice notation work? That is: when I write code like a[x:y:z], a[:], a[::2] etc., how can I understand which elements end up in the slice?

See Why are slice and range upper-bound exclusive? to learn why xs[0:2] == [xs[0], xs[1]], not [..., xs[2]].
See Make a new list containing every Nth item in the original list for xs[::N].
See How does assignment work with list slices? to learn what xs[0:2] = [""a"", ""b""] does.
",
"
Given a list [""foo"", ""bar"", ""baz""] and an item in the list ""bar"", how do I get its index 1?
",
"
d = {'x': 1, 'y': 2, 'z': 3}

for key in d:
    print(key, 'corresponds to', d[key])

How does Python recognize that it needs only to read the key from the dictionary? Is key a special keyword, or is it simply a variable?
",
"
I have a pandas dataframe, df:
   c1   c2
0  10  100
1  11  110
2  12  120

How do I iterate over the rows of this dataframe? For every row, I want to access its elements (values in cells) by the name of the columns. For example:
for row in df.rows:
    print(row['c1'], row['c2'])


I found a similar question, which suggests using either of these:


for date, row in df.T.iteritems():



for row in df.iterrows():



But I do not understand what the row object is and how I can work with it.
",
"
How do I create or use a global variable inside a function?
How do I use a global variable that was defined in one function inside other functions?

Failing to use the global keyword where appropriate often causes UnboundLocalError. The precise rules for this are explained at UnboundLocalError on local variable when reassigned after first use. Generally, please close other questions as a duplicate of that question when an explanation is sought, and this question when someone simply needs to know the global keyword.
",
"
How do I get the current time in Python?
",
"
I know that I can do:
try:
    # do something that may fail
except:
    # do this if ANYTHING goes wrong

I can also do this:
try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreTooShortException:
    # stand on a ladder

But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:
try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreBeingMeanException:
    # say please

Is there any way that I can do something like this (since the action to take in both exceptions is to say please):
try:
    # do something that may fail
except IDontLikeYouException, YouAreBeingMeanException:
    # say please

Now this really won't work, as it matches the syntax for:
try:
    # do something that may fail
except Exception, e:
    # say please

So, my effort to catch the two distinct exceptions doesn't exactly come through.
Is there a way to do this?
",
"
How do I copy a file in Python?
",
"
I captured the standard output of an external program into a bytes object:
>>> from subprocess import *
>>> stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]
>>> stdout
b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'

I want to convert that to a normal Python string, so that I can print it like this:
>>> print(stdout)
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2

How do I convert the bytes object to a str with Python 3?

See Best way to convert string to bytes in Python 3? for the other way around.
",
"
What is __init__.py for in a Python source directory?
",
"
What is the difference between __str__ and __repr__ in Python?
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






I'm looking for a string.contains or string.indexof method in Python.
I want to do:
if not somestring.contains(""blah""):
   continue

",
"
How do I add a new key to an existing dictionary? It doesn't have an .add() method.
",
"
How can I select rows from a DataFrame based on values in some column in Pandas?
In SQL, I would use:
SELECT *
FROM table
WHERE column_name = some_value

",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






How can I list all files of a directory in Python and add them to a list?
",
"
Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:
def foo(a=[]):
    a.append(5)
    return a

Python novices would expect this function called with no parameter to always return a list with only one element: [5]. The result is instead very different, and very astonishing (for a novice):
>>> foo()
[5]
>>> foo()
[5, 5]
>>> foo()
[5, 5, 5]
>>> foo()
[5, 5, 5, 5]
>>> foo()

A manager of mine once had his first encounter with this feature, and called it ""a dramatic design flaw"" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)
Edit:
Baczek made an interesting example. Together with most of your comments and Utaal's in particular, I elaborated further:
def a():
    print(""a executed"")
    return []

           
def b(x=a()):
    x.append(5)
    print(x)

a executed
>>> b()
[5]
>>> b()
[5, 5]

To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function, or ""together"" with it?
Doing the binding inside the function would mean that x is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the def line would be ""hybrid"" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.
The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.
I can sort on the keys, but how can I sort based on the values?
Note: I have read Stack Overflow question here How do I sort a list of dictionaries by a value of the dictionary? and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.
",
"
How can I delete a file or folder in Python?
",
"
What do *args and **kwargs mean in these function definitions?
def foo(x, y, *args):
    pass

def bar(x, y, **kwargs):
    pass


See What do ** (double star/asterisk) and * (star/asterisk) mean in a function call? for the complementary question about arguments.
",
"
While using new_list = my_list, any modifications to new_list changes my_list every time. Why is this, and how can I clone or copy the list to prevent it?
",
"
I wrote this class for testing:
class PassByReference:
    def __init__(self):
        self.variable = 'Original'
        self.change(self.variable)
        print(self.variable)

    def change(self, var):
        var = 'Changed'

When I tried creating an instance, the output was Original. So it seems like parameters in Python are passed by value. Is that correct? How can I modify the code to get the effect of pass-by-reference, so that the output is Changed?

Sometimes people are surprised that code like x = 1, where x is a parameter name, doesn't impact on the caller's argument, but code like x[0] = 1 does. This happens because item assignment and slice assignment are ways to mutate an existing object, rather than reassign a variable, despite the = syntax. See Why can a function modify some arguments as perceived by the caller, but not others? for details.
See also What's the difference between passing by reference vs. passing by value? for important, language-agnostic terminology discussion.
",
"
How can I get the value of an environment variable in Python?
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






How do I concatenate two lists in Python?
Example:
listone = [1, 2, 3]
listtwo = [4, 5, 6]

Expected outcome:
>>> joinedlist
[1, 2, 3, 4, 5, 6]

",
"
How do I raise an exception in Python so that it can later be caught via an except block?
",
"







This question already has answers here:
                                
                            




What does 'super' do in Python? - difference between super().__init__() and explicit superclass __init__()

                                (11 answers)
                            

Closed 8 years ago.



Why is super() used?
Is there a difference between using Base.__init__ and super().__init__?
class Base(object):
    def __init__(self):
        print ""Base created""
        
class ChildA(Base):
    def __init__(self):
        Base.__init__(self)
        
class ChildB(Base):
    def __init__(self):
        super(ChildB, self).__init__()
        
ChildA() 
ChildB()

",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






For example, if passed the following:
a = []

How do I check to see if a is empty?
",
"







This question already has answers here:
                                
                            




How do I get my program to sleep for 50 milliseconds?

                                (6 answers)
                            

Closed 4 years ago.
The community reviewed whether to reopen this question 29 days ago and left it closed:

Original close reason(s) were not resolved




How do I put a time delay in a Python script?
",
"
How do I change the size of figure drawn with Matplotlib?
",
"
How do I output colored text to the terminal in Python?
",
"
How do I make two decorators in Python that would do the following?
@make_bold
@make_italic
def say():
   return ""Hello""

Calling say() should return:
""<b><i>Hello</i></b>""

",
"
How do I split a list of arbitrary length into equal sized chunks?

See also: How to iterate over a list in chunks.
To chunk strings, see Split string every nth character?.
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






What's the difference between the list methods append() and extend()?
",
"
It is my understanding that the range() function, which is actually an object type in Python 3, generates its contents on the fly, similar to a generator.
This being the case, I would have expected the following line to take an inordinate amount of time because, in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated:
1_000_000_000_000_000 in range(1_000_000_000_000_001)

Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous).
I have also tried things like this, but the calculation is still almost instant:
# count by tens
1_000_000_000_000_000_000_000 in range(0,1_000_000_000_000_000_000_001,10)

If I try to implement my own range function, the result is not so nice!
def my_crappy_range(N):
    i = 0
    while i < N:
        yield i
        i += 1
    return

What is the range() object doing under the hood that makes it so fast?

Martijn Pieters's answer was chosen for its completeness, but also see abarnert's first answer for a good discussion of what it means for range to be a full-fledged sequence in Python 3, and some information/warning regarding potential inconsistency for __contains__ function optimization across Python implementations. abarnert's other answer goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of xrange in Python 2). Answers by poke and by wim provide the relevant C source code and explanations for those who are interested.
",
"







This question already has answers here:
                                
                            




What's the working directory when using IDLE?

                                (6 answers)
                            


How do I get the path and name of the python file that is currently executing?

                                (26 answers)
                            

Closed 6 years ago.



How do I determine:

the current directory (where I was in the shell when I ran the Python script), and
where the Python file I am executing is?

",
"
I want to change the column labels of a Pandas DataFrame from
['$a', '$b', '$c', '$d', '$e']

to
['a', 'b', 'c', 'd', 'e']

",
"
I have a huge list of datetime strings like the following
[""Jun 1 2005 1:33PM"", ""Aug 28 1999 12:00AM""]

How do I convert them into datetime objects?
",
"
I want to remove a key from a dictionary if it is present. I currently use this code:
if key in my_dict:
    del my_dict[key]

Without the if statement, the code will raise KeyError if the key is not present. How can I handle this more simply?

See Delete an element from a dictionary for more general approaches to the problem of removing a key from a dict (including ones which produce a modified copy).
",
"










Want to improve this post? Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.
                                
                            






Is it possible to upgrade all Python packages at one time with pip?
Note: that there is a feature request for this on the official issue tracker.
",
"
How do I sort a list of dictionaries by a specific key's value? Given:
[{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}]

When sorted by name, it should become:
[{'name': 'Bart', 'age': 10}, {'name': 'Homer', 'age': 39}]

",
"
How do I get the last element of a list? Which way is preferred?
alist[-1]
alist[len(alist) - 1]

",
"
pip is a replacement for easy_install. But should I install pip using easy_install on Windows? Is there a better way?
",
"
How can I convert an str to a float?
""545.2222"" -> 545.2222

Or an str to a int?
""31"" -> 31


For the reverse, see Convert integer to string in Python and Converting a float to a string without rounding it.
Please instead use How can I read inputs as numbers? to close duplicate questions where OP received a string from user input and immediately wants to convert it, or was hoping for input (in 3.x) to convert the type automatically.
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






I wanted to test if a key exists in a dictionary before updating the value for the key.
I wrote the following code:
if 'key1' in dict.keys():
  print ""blah""
else:
  print ""boo""

I think this is not the best way to accomplish this task. Is there a better way to test for a key in the dictionary?
",
"







This question already has answers here:
                                
                            




How slicing in Python works

                                (38 answers)
                            

Closed last year.



I want to get a new string from the third character to the end of the string, e.g. myString[2:end]. If omitting the second part means 'to the end', and if you omit the first part, does it start from the start?
",
"
I'm using virtualenv and the virtualenvwrapper. I can switch between virtualenv's just fine using the workon command.
me@mymachine:~$ workon env1
(env1)me@mymachine:~$ workon env2
(env2)me@mymachine:~$ workon env1
(env1)me@mymachine:~$ 

How do I exit all virtual environments and work on my system environment again? Right now, the only way I have of getting back to me@mymachine:~$ is to exit the shell and start a new one. That's kind of annoying. Is there a command to work on ""nothing"", and if so, what is it? If such a command does not exist, how would I go about creating it?
",
"
How do I create class (i.e. static) variables or methods in Python?
",
"
Non-working example:
print("" \{ Hello \} {0} "".format(42))

Desired output:
 {Hello} 42 

",
"
I have this folder structure:
application
├── app
│   └── folder
│       └── file.py
└── app2
    └── some_folder
        └── some_file.py

How can I import a function from file.py, from within some_file.py? I tried:
from application.app.folder.file import func_name

but it doesn't work.
",
"
Is there a way to convert a string to lowercase?
""Kilometers""  →  ""kilometers""


See How to change a string into uppercase? for the opposite.
",
"
How do I check if an object has some attribute? For example:
>>> a = SomeClass()
>>> a.property
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
AttributeError: SomeClass instance has no attribute 'property'

How do I tell if a has the attribute property before using it?
",
"
Consider these examples using print in Python:
>>> for i in range(4): print('.')
.
.
.
.
>>> print('.', '.', '.', '.')
. . . .

Either a newline or a space is added between each value. How can I avoid that, so that the output is .... instead? In other words, how can I ""append"" strings to the standard output stream?
",
"
How do I call a function, using a string with the function's name? For example:
import foo
func_name = ""bar""
call(foo, func_name)  # calls foo.bar()

",
"
I want a to be rounded to 13.95. I tried using round, but I get:
>>> a
13.949999999999999
>>> round(a, 2)
13.949999999999999


For the analogous issue with the standard library Decimal class, see How can I format a decimal to always show 2 decimal places?.
",
"
How do I retrieve an item at random from the following list?
foo = ['a', 'b', 'c', 'd', 'e']

",
"
How do I remove an element from a list by index?
I found list.remove(), but this slowly scans the list for an item by value.
",
"
How do I get the number of elements in the list items?
items = [""apple"", ""orange"", ""banana""]

# There are 3 items.

",
"
To delete a column in a DataFrame, I can successfully use:
del df['column_name']

But why can't I use the following?
del df.column_name

Since it is possible to access the Series via df.column_name, I expected this to work.
",
"
How do I delete an item from a dictionary in Python?
Without modifying the original dictionary, how do I obtain another dict with the item removed?

See also How can I remove a key from a Python dictionary? for the specific issue of removing an item (by key) that may not already be present.
",
"
I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something.

(TLDR answer: include the statement: cin.sync_with_stdio(false) or just use fgets instead.
TLDR results: scroll all the way down to the bottom of my question and look at the table.)

C++ code:
#include <iostream>
#include <time.h>

using namespace std;

int main() {
    string input_line;
    long line_count = 0;
    time_t start = time(NULL);
    int sec;
    int lps;

    while (cin) {
        getline(cin, input_line);
        if (!cin.eof())
            line_count++;
    };

    sec = (int) time(NULL) - start;
    cerr << ""Read "" << line_count << "" lines in "" << sec << "" seconds."";
    if (sec > 0) {
        lps = line_count / sec;
        cerr << "" LPS: "" << lps << endl;
    } else
        cerr << endl;
    return 0;
}

// Compiled with:
// g++ -O3 -o readline_test_cpp foo.cpp

Python Equivalent:
#!/usr/bin/env python
import time
import sys

count = 0
start = time.time()

for line in  sys.stdin:
    count += 1

delta_sec = int(time.time() - start_time)
if delta_sec >= 0:
    lines_per_sec = int(round(count/delta_sec))
    print(""Read {0} lines in {1} seconds. LPS: {2}"".format(count, delta_sec,
       lines_per_sec))

Here are my results:
$ cat test_lines | ./readline_test_cpp
Read 5570000 lines in 9 seconds. LPS: 618889

$ cat test_lines | ./readline_test.py
Read 5570000 lines in 1 seconds. LPS: 5570000

I should note that I tried this both under Mac OS X v10.6.8 (Snow Leopard) and Linux 2.6.32 (Red Hat Linux 6.2). The former is a MacBook Pro, and the latter is a very beefy server, not that this is too pertinent.
$ for i in {1..5}; do echo ""Test run $i at `date`""; echo -n ""CPP:""; cat test_lines | ./readline_test_cpp ; echo -n ""Python:""; cat test_lines | ./readline_test.py ; done

Test run 1 at Mon Feb 20 21:29:28 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 2 at Mon Feb 20 21:29:39 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 3 at Mon Feb 20 21:29:50 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 4 at Mon Feb 20 21:30:01 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 5 at Mon Feb 20 21:30:11 EST 2012
CPP:   Read 5570001 lines in 10 seconds. LPS: 557000
Python:Read 5570000 lines in  1 seconds. LPS: 5570000


Tiny benchmark addendum and recap
For completeness, I thought I'd update the read speed for the same file on the same box with the original (synced) C++ code. Again, this is for a 100M line file on a fast disk. Here's the comparison, with several solutions/approaches:




Implementation
Lines per second




python (default)
3,571,428


cin (default/naive)
819,672


cin (no sync)
12,500,000


fgets
14,285,714


wc (not fair comparison)
54,644,808



 ",
"
How do I pad a numeric string with zeroes to the left, so that the string has a specific length?
",
"
How do I see the type of a variable? (e.g. unsigned 32 bit)
",
"
Given a single item, how do I count occurrences of it in a list, in Python?

A related but different problem is counting occurrences of each different element in a collection, getting a dictionary or list as a histogram result instead of a single integer. For that problem, see Using a dictionary to count the items in a list.
",
"







This question already has answers here:
                                
                            




What's the canonical way to check for type in Python?

                                (19 answers)
                            

Closed 1 year ago.



Is there a simple way to determine if a variable is a list, dictionary, or something else?
",
"
Does Python have something like an empty string variable where you can do:
if myString == string.empty:

Regardless, what's the most elegant way to check for empty string values? I find hard coding """" every time for checking an empty string not as good.
",
"
Python 3.3 includes in its standard library the new package venv. What does it do, and how does it differ from all the other packages that match the regex (py)?(v|virtual|pip)?env?
",
"
This has always confused me. It seems like this would be nicer:
[""Hello"", ""world""].join(""-"")

Than this:
""-"".join([""Hello"", ""world""])

Is there a specific reason it is like this?
",
"
I want to measure the time it took to execute a function. I couldn't get timeit to work:
import timeit
start = timeit.timeit()
print(""hello"")
end = timeit.timeit()
print(end - start)

",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






We are working on an S60 version and this platform has a nice Python API..
However, there is nothing official about Python on Android, but since Jython exists, is there a way to let the snake and the robot work together??
",
"
How do I append to a file instead of overwriting it?
",
"
How can I remove the last character of a string if it is a newline?
""abc\n""  -->  ""abc""

",
"
Can I define a static method which I can call directly on the class instance? e.g.,
MyClass.the_static_method()

",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






How do I read every line of a file in Python and store each line as an element in a list? 
I want to read the file line by line and append each line to the end of the list.
",
"
I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a + operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:
var long_string = 'some text not important. just garbage to' +
                      'illustrate my example';

I tried doing something similar in Python, but it didn't work, so I used \ to split the long string. However, I'm not sure if this is the only/best/pythonicest way of doing it. It looks awkward.
Actual code:
query = 'SELECT action.descr as ""action"", '\
    'role.id as role_id,'\
    'role.descr as role'\
    'FROM '\
    'public.role_action_def,'\
    'public.role,'\
    'public.record_def, '\
    'public.action'\
    'WHERE role.id = role_action_def.role_id AND'\
    'record_def.id = role_action_def.def_id AND'\
    'action.id = role_action_def.action_id AND'\
    'role_action_def.account_id = ' + account_id + ' AND'\
    'record_def.account_id=' + account_id + ' AND'\
    'def_id=' + def_id


See also: How can I do a line break (line continuation) in Python (split up a long line of source code)? when the overall line of code is long but doesn't contain a long string literal.
",
"
How do I check if a string represents a numeric value in Python?
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

The above works, but it seems clunky.

If what you are testing comes from user input, it is still a string even if it represents an int or a float. See How can I read inputs as numbers? for converting the input, and Asking the user for input until they give a valid response for ensuring that the input represents an int or float (or other requirements) before proceeding.
",
"
How do I find out the name of the class used to create an instance of an object in Python?
I'm not sure if I should use the inspect module or parse the __class__ attribute.
",
"
I am trying to install version 1.2.2 of MySQL_python, using a fresh virtualenv created with the --no-site-packages option. The current version shown in PyPi is 1.2.3. Is there a way to install the older version? I have tried:
pip install MySQL_python==1.2.2

However, when installed, it still shows MySQL_python-1.2.3-py2.6.egg-info in the site packages. Is this a problem specific to this package, or am I doing something wrong?
",
"
How do I pretty-print a JSON file in Python?
",
"







This question already has answers here:
                                
                            




What is the difference between @staticmethod and @classmethod in Python?

                                (36 answers)
                            

Closed 5 years ago.



What do @classmethod and @staticmethod mean in Python, and how are they different? When should I use them, why should I use them, and how should I use them?
As far as I understand, @classmethod tells a class that it's a method which should be inherited into subclasses, or... something. However, what's the point of that? Why not just define the class method without adding @classmethod or @staticmethod or any @ definitions?
",
"
How do I get the number of rows of a pandas dataframe df?
",
"
How do I check if an object is of a given type, or if it inherits from a given type?
How do I check if the object o is of type str?

Beginners often wrongly expect the string to already be ""a number"" - either expecting Python 3.x input to convert type, or expecting that a string like '1' is also simultaneously an integer. This is the wrong canonical for those questions. Please carefully read the question and then use How do I check if a string represents a number (float or int)?, How can I read inputs as numbers? and/or Asking the user for input until they give a valid response as appropriate.
",
"
How can I generate random integers between 0 and 9 (inclusive) in Python?
For example, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
",
"
What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception.
By ""modern Python"" I mean something that will run in Python 2.5 but be 'correct' for the Python 2.6 and Python 3.* way of doing things. And by ""custom"" I mean an Exception object that can include extra data about the cause of the error: a string, maybe also some other arbitrary object relevant to the exception.
I was tripped up by the following deprecation warning in Python 2.6.2:
>>> class MyError(Exception):
...     def __init__(self, message):
...         self.message = message
... 
>>> MyError(""foo"")
_sandbox.py:3: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6

It seems crazy that BaseException has a special meaning for attributes named message. I gather from PEP-352 that attribute did have a special meaning in 2.5 they're trying to deprecate away, so I guess that name (and that one alone) is now forbidden? Ugh.
I'm also fuzzily aware that Exception has some magic parameter args, but I've never known how to use it. Nor am I sure it's the right way to do things going forward; a lot of the discussion I found online suggested they were trying to do away with args in Python 3.
Update: two answers have suggested overriding __init__, and __str__/__unicode__/__repr__. That seems like a lot of typing, is it necessary?
",
"
I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:
gcc -Wall utilsmodule.c -o Utilc

After executing the command, I get this error message:
> utilsmodule.c:1:20: fatal error: Python.h: No such file or directory
compilation terminated.

I have tried all the suggested solutions over the internet but the problem still exists. I have no problem with Python.h. I managed to locate the file on my machine.
",
"
What do single and double leading underscores before an object's name represent in Python?
",
"
Is there a function to extract the extension from a filename?
",
"
Here is the problem:
I have a requirements.txt file that looks like:
BeautifulSoup==3.2.0
Django==1.3
Fabric==1.2.0
Jinja2==2.5.5
PyYAML==3.09
Pygments==1.4
SQLAlchemy==0.7.1
South==0.7.3
amqplib==0.6.1
anyjson==0.3
...

I have a local archive directory containing all the packages + others.
I have created a new virtualenv with
bin/virtualenv testing

Upon activating it, I tried to install the packages according to requirements.txt from the local archive directory.
source bin/activate
pip install -r /path/to/requirements.txt -f file:///path/to/archive/

I got some output that seems to indicate that the installation is fine:
Downloading/unpacking Fabric==1.2.0 (from -r ../testing/requirements.txt (line 3))
  Running setup.py egg_info for package Fabric
    warning: no previously-included files matching '*' found under directory 'docs/_build'
    warning: no files found matching 'fabfile.py'
Downloading/unpacking South==0.7.3 (from -r ../testing/requirements.txt (line 8))
  Running setup.py egg_info for package South
....

But a later check revealed that none of the packages are installed properly. I cannot import the packages, and none are found in the site-packages directory of my virtualenv. So what went wrong?
",
"
How do I load a Python module given its full path?
Note that the file can be anywhere in the filesystem where the user has access rights.

See also: How to import a module given its name as string?
",
"
How do I read from stdin? Some code golf challenges require using stdin for input.
",
"
How do I write JSON data stored in the dictionary data to a file?
f = open('data.json', 'wb')
f.write(data)

This gives the error:

TypeError: must be string or buffer, not dict

",
"
I've been here:

PEP 328 – Imports: Multi-Line and Absolute/Relative
Modules, Packages
Python packages: relative imports
Python relative import example code does not work
Relative imports in Python 2.5
Relative imports in Python
Python: Disabling relative import

and plenty of URLs that I did not copy, some on SO, some on other sites, back when I thought I'd have the solution quickly.
The forever-recurring question is this: how do I solve this ""Attempted relative import in non-package"" message?

ImportError: attempted relative import with no known parent package

I built an exact replica of the package on pep-0328:
package/
    __init__.py
    subpackage1/
        __init__.py
        moduleX.py
        moduleY.py
    subpackage2/
        __init__.py
        moduleZ.py
    moduleA.py

The imports were done from the console.
I did make functions named spam and eggs in their appropriate modules.  Naturally, it didn't work.  The answer is apparently in the 4th URL I listed, but it's all alumni to me. There was this response on one of the URLs I visited:

Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.

The above response looks promising, but it's all hieroglyphs to me. How do I make Python not return to me ""Attempted relative import in non-package""? It has an answer that involves -m, supposedly.
Why does Python give that error message? What does by ""non-package"" mean? Why and how do you define a 'package'?
",
"
I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running.
I've looked at the timeit module, but it seems it's only for small snippets of code. I want to time the whole program.
",
"
There are several ways to write to stderr:
print >> sys.stderr, ""spam""  # Python 2 only.

sys.stderr.write(""spam\n"")

os.write(2, b""spam\n"")

from __future__ import print_function
print(""spam"", file=sys.stderr)

What are the differences between these methods? Which method should be preferred?
",
"
How do I generate a string of size N, made of numbers and uppercase English letters such as:

6U1S75
4Z4UKK
U911K4

",
"
How do I create a virtual environment for a specified version of Python?
",
"
How do I select columns a and b from df, and save them into a new dataframe df1?
index  a   b   c
1      2   3   4
2      3   4   5

Unsuccessful attempt:
df1 = df['a':'b']
df1 = df.ix[:, 'a':'b']

",
"
I want to combine these:
keys = ['name', 'age', 'food']
values = ['Monty', 42, 'spam']

into a single dictionary:
{'name': 'Monty', 'age': 42, 'food': 'spam'}

How can I do this?
",
"
This displays the figure in a GUI:
import matplotlib.pyplot as plt
plt.plot([1, 2, 3], [1, 4, 9])
plt.show()

But how do I instead save the figure to a file (e.g. foo.png)?
",
"
I want to import a function from another file in the same directory.
Usually, one of the following works:
from .mymodule import myfunction

from mymodule import myfunction

...but the other one gives me one of these errors:
ImportError: attempted relative import with no known parent package

ModuleNotFoundError: No module named 'mymodule'

SystemError: Parent module '' not loaded, cannot perform relative import

Why is this?
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






I want to write a function in Python that returns different fixed values based on the value of an input index.  
In other languages I would use a switch or case statement, but Python does not appear to have a switch statement.  What are the recommended Python solutions in this scenario?
",
"
I see __all__ in __init__.py files. What does it do?
",
"
How do I get the filename without the extension from a path in Python?
""/path/to/some/file.txt""  →  ""file""

",
"
Project Euler and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to __main__.
What is a good way to profile how long a Python program takes to run?
",
"
This question is not for the discussion of whether or not the singleton design pattern is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'.
I have multiple classes which would become singletons (my use-case is for a logger, but this is not important). I do not wish to clutter several classes with added gumph when I can simply inherit or decorate.
Best methods:

Method 1: A decorator
def singleton(class_):
    instances = {}
    def getinstance(*args, **kwargs):
        if class_ not in instances:
            instances[class_] = class_(*args, **kwargs)
        return instances[class_]
    return getinstance

@singleton
class MyClass(BaseClass):
    pass

Pros

Decorators are additive in a way that is often more intuitive than multiple inheritance.

Cons

While objects created using MyClass() would be true singleton objects, MyClass itself is a function, not a class, so you cannot call class methods from it. Also for
x = MyClass();
y = MyClass();
t = type(n)();



then x == y but x != t && y != t

Method 2: A base class
class Singleton(object):
    _instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_._instance, class_):
            class_._instance = object.__new__(class_, *args, **kwargs)
        return class_._instance

class MyClass(Singleton, BaseClass):
    pass

Pros

It's a true class

Cons

Multiple inheritance - eugh! __new__ could be overwritten during inheritance from a second base class? One has to think more than is necessary.


Method 3: A metaclass
class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

#Python2
class MyClass(BaseClass):
    __metaclass__ = Singleton

#Python3
class MyClass(BaseClass, metaclass=Singleton):
    pass

Pros

It's a true class
Auto-magically covers inheritance
Uses __metaclass__ for its proper purpose (and made me aware of it)

Cons

Are there any?


Method 4: decorator returning a class with the same name
def singleton(class_):
    class class_w(class_):
        _instance = None
        def __new__(class_, *args, **kwargs):
            if class_w._instance is None:
                class_w._instance = super(class_w,
                                    class_).__new__(class_,
                                                    *args,
                                                    **kwargs)
                class_w._instance._sealed = False
            return class_w._instance
        def __init__(self, *args, **kwargs):
            if self._sealed:
                return
            super(class_w, self).__init__(*args, **kwargs)
            self._sealed = True
    class_w.__name__ = class_.__name__
    return class_w

@singleton
class MyClass(BaseClass):
    pass

Pros

It's a true class
Auto-magically covers inheritance

Cons

Is there not an overhead for creating each new class? Here we are creating two classes for each class we wish to make a singleton. While this is fine in my case, I worry that this might not scale. Of course there is a matter of debate as to whether it aught to be too easy to scale this pattern...
What is the point of the _sealed attribute
Can't call methods of the same name on base classes using super() because they will recurse. This means you can't customize __new__ and can't subclass a class that needs you to call up to __init__.


Method 5: a module
a module file singleton.py
Pros

Simple is better than complex

Cons

Not lazily instantiated

",
"
How do I convert the following for-loop containing an if/else into a list comprehension?
results = []
for x in xs:
    results.append(f(x) if x is not None else '')

It should yield '' if x is None, and otherwise f(x).
I tried:
[f(x) for x in xs if x is not None else '']

but it gives a SyntaxError. What is the correct syntax?

See Does Python have a ternary conditional operator? for info on ... if ... else ....
See List comprehension with condition for omitting values based on a condition: [... for x in xs if x cond].
See `elif` in list comprehension conditionals for elif.
",
"
Why does the following class declaration inherit from object?
class MyClass(object):
    ...

",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






I spent most of the day yesterday searching for a clear answer for installing pip (package manager for Python). I can't find a good solution.
How do I install it?
",
"
There is no built in reverse method for Python's str object. How can I reverse a string?
",
"
float('nan') represents NaN (not a number). But how do I check for it?
",
"
I have a series of 20 plots (not subplots) to be made in a single figure. I want the legend to be outside of the box. At the same time, I do not want to change the axes, as the size of the figure gets reduced.

I want to keep the legend box outside the plot area (I want the legend to be outside at the right side of the plot area).
Is there a way to reduce the font size of the text inside the legend box, so that the size of the legend box will be small?

",
"
I have the following DataFrame (df):
import numpy as np
import pandas as pd

df = pd.DataFrame(np.random.rand(10, 5))

I add more column(s) by assignment:
df['mean'] = df.mean(1)

How can I move the column mean to the front, i.e. set it as first column leaving the order of the other columns untouched?
",
"
What is the Python 3 equivalent of python -m SimpleHTTPServer?
",
"
How do I check if a directory exists in Python?
",
"
What is setup.py and how can it be configured or used?
",
"
How do I force Python's print function to flush the buffered output to the screen?

See also: Disable output buffering if the goal is to change the buffering behaviour generally. This question is about explicitly flushing output after a specific print call, even though output is still being buffered.
For duplicate closers: if a beginner is asking a question about trying to make output appear immediately while not using a newline at the end, please instead use Why doesn't print output show up immediately in the terminal when there is no newline at the end? to close the question. The current question isn't good enough because the person asking will likely not have a concept of buffering or flushing; the other question is intended to explain those concepts first, whereas this question is about the technical details.
",
"
How do I convert an integer to a string?
42   ⟶   ""42""


For the reverse, see How do I parse a string to a float or int?. Floats can be handled similarly, but handling the decimal points can be tricky because floating-point values are not precise. See Converting a float to a string without rounding it for more specific advice.
",
"
Can I use list comprehension syntax to create a dictionary?
For example, by iterating over pairs of keys and values:
d = {... for k, v in zip(keys, values)}

",
"







This question already has answers here:
                                
                            




What's the canonical way to check for type in Python?

                                (19 answers)
                            

Closed 8 months ago.
The community reviewed whether to reopen this question 23 days ago and left it closed:

Original close reason(s) were not resolved




What are the differences between these two code snippets?
Using type:
import types

if type(a) is types.DictType:
    do_something()
if type(b) in types.StringTypes:
    do_something_else()

Using isinstance:
if isinstance(a, dict):
    do_something()
if isinstance(b, str) or isinstance(b, unicode):
    do_something_else()

",
"







This question already has answers here:
                                
                            




What does ** (double star/asterisk) and * (star/asterisk) do for parameters?

                                (28 answers)
                            

Closed 10 years ago.



So I have difficulty with the concept of *args and **kwargs.
So far I have learned that:

*args = list of arguments - as positional arguments
**kwargs = dictionary - whose keys become separate keyword arguments and the values become values of these arguments.

I don't understand what programming task this would be helpful for. 
Maybe:
I think to enter lists and dictionaries as arguments of a function AND at the same time as a wildcard, so I can pass ANY argument?
Is there a simple example to explain how *args and **kwargs are used?
Also the tutorial I found used just the ""*"" and a variable name. 
Are *args and **kwargs just placeholders or do you use exactly *args and **kwargs in the code?
",
"
I created a DataFrame from a list of lists:
table = [
    ['a',  '1.2',  '4.2' ],
    ['b',  '70',   '0.03'],
    ['x',  '5',    '0'   ],
]

df = pd.DataFrame(table)

How do I convert the columns to specific types? In this case, I want to convert columns 2 and 3 into floats.
Is there a way to specify the types while converting the list to DataFrame? Or is it better to create the DataFrame first and then loop through the columns to change the dtype for each column? Ideally I would like to do this in a dynamic way because there can be hundreds of columns, and I don't want to specify exactly which columns are of which type. All I can guarantee is that each column contains values of the same type.
",
"
How do I sort a dictionary by its keys?
Example input:
{2:3, 1:89, 4:5, 3:0}

Desired output:
{1:89, 2:3, 3:0, 4:5}

",
"
I am having trouble installing psycopg2. I get the following error when I try to pip install psycopg2:
Error: pg_config executable not found.

Please add the directory containing pg_config to the PATH

or specify the full executable path with the option:



    python setup.py build_ext --pg-config /path/to/pg_config build ...



or with the pg_config option in 'setup.cfg'.

----------------------------------------
Command python setup.py egg_info failed with error code 1 in /tmp/pip-build/psycopg2

But the problem is pg_config is actually in my PATH; it runs without any problem:
$ which pg_config
/usr/pgsql-9.1/bin/pg_config

I tried adding the pg_config path to the setup.cfg file and building it using the source files I downloaded from their website (http://initd.org/psycopg/) and I get the following error message!
Error: Unable to find 'pg_config' file in '/usr/pgsql-9.1/bin/'

But it is actually THERE!!!
I am baffled by these errors. Can anyone help please?
By the way, I sudo all the commands. Also I am on RHEL 5.5.
",
"
I would like a clear example showing tasks being divided across multiple threads.
",
"
I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. 
The problem is that the error is not always reproducible; it sometimes works with some pages, and sometimes, it barfs by throwing a UnicodeEncodeError. I have tried just about everything I can think of, and yet I have not found anything that works consistently without throwing some kind of Unicode-related error.
One of the sections of code that is causing problems is shown below:
agent_telno = agent.find('div', 'agent_contact_number')
agent_telno = '' if agent_telno is None else agent_telno.contents[0]
p.agent_info = str(agent_contact + ' ' + agent_telno).strip()

Here is a stack trace produced on SOME strings when the snippet above is run:
Traceback (most recent call last):
  File ""foobar.py"", line 792, in <module>
    p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)

I suspect that this is because some pages (or more specifically, pages from some of the sites) may be encoded, whilst others may be unencoded. All the sites are based in the UK and provide data meant for UK consumption - so there are no issues relating to internalization or dealing with text written in anything other than English.
Does anyone have any ideas as to how to solve this so that I can CONSISTENTLY fix this problem?
",
"







Closed. This question is not reproducible or was caused by typos. It is not currently accepting answers.
                                
                            











 This question was caused by a typo or a problem that can no longer be reproduced. While similar questions may be on-topic here, this one was resolved in a way less likely to help future readers.


Closed 1 year ago.


The community reviewed whether to reopen this question 1 year ago and left it closed:

Original close reason(s) were not resolved














Locked. This question and its answers are locked because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.
                                
                            






I have this JSON in a file:
{
    ""maps"": [
        {
            ""id"": ""blabla"",
            ""iscategorical"": ""0""
        },
        {
            ""id"": ""blabla"",
            ""iscategorical"": ""0""
        }
    ],
    ""masks"": [
        ""id"": ""valore""
    ],
    ""om_points"": ""value"",
    ""parameters"": [
        ""id"": ""valore""
    ]
}

I wrote this script to print all of the JSON data:
import json
from pprint import pprint

with open('data.json') as f:
    data = json.load(f)

pprint(data)

This program raises an exception, though:
Traceback (most recent call last):
  File ""<pyshell#1>"", line 5, in <module>
    data = json.load(f)
  File ""/usr/lib/python3.5/json/__init__.py"", line 319, in loads
    return _default_decoder.decode(s)
  File ""/usr/lib/python3.5/json/decoder.py"", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File ""/usr/lib/python3.5/json/decoder.py"", line 355, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting ',' delimiter: line 13 column 13 (char 213)

How can I parse the JSON and extract its values?
",
"
So what I'm looking for here is something like PHP's print_r function.
This is so I can debug my scripts by seeing what's the state of the object in question.
",
"







Closed. This question is opinion-based. It is not currently accepting answers.
                                
                            











Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.


Closed 3 months ago.







                        Improve this question
                    



TypeError: 'str' does not support the buffer interface suggests two possible methods to convert a string to bytes:
b = bytes(mystring, 'utf-8')

b = mystring.encode('utf-8')

Which method is more Pythonic?

See Convert bytes to a string for the other way around.
",
"
How do I check which version of the Python interpreter is running my script?

 See Find full path of the Python interpreter (Python executable)? if you are looking to find exactly which interpreter is being used - for example, to debug a Pip installation problem, or to check which virtual environment (if any) is active. 
",
"
How do I refer to the null object in Python?
",
"
I set dict2 = dict1. When I edit dict2, the original dict1 also changes. How can I avoid this?
>>> dict1 = {""key1"": ""value1"", ""key2"": ""value2""}
>>> dict2 = dict1
>>> dict2[""key2""] = ""WHY?!""
>>> dict1
{'key2': 'WHY?!', 'key1': 'value1'}

",
"
How can I do the equivalent of mv in Python?
mv ""path/to/current/file.foo"" ""path/to/new/destination/for/file.foo""

",
"
I want to catch and log exceptions without exiting, e.g.,
try:
    do_stuff()
except Exception as err:
    print(Exception, err)
    # I want to print the entire traceback here,
    # not just the exception name and details

I want to print the exact same output that is printed when the exception is raised without the try/except intercepting the exception, and I do not want it to exit my program.
",
"
How can I check if a list has any duplicates and return a new list without duplicates?
",
"
What does assert mean? How is it used?
",
"







This question already has answers here:
                                
                            




How do I get the path and name of the python file that is currently executing?

                                (26 answers)
                            


Given a path, how can I extract just the containing folder name?

                                (8 answers)
                            

Closed last year.



How do I get the current file's directory path?
I tried:
>>> os.path.abspath(__file__)
'C:\\python27\\test.py'

But I want:
'C:\\python27\\'

",
"
There are various string formatting methods:

Python <2.6: ""Hello %s"" % name
Python 2.6+: ""Hello {}"".format(name)   (uses str.format)
Python 3.6+: f""{name}""   (uses f-strings)

Which is better, and for what situations?


The following methods have the same outcome, so what is the difference?
name = ""Alice""

""Hello %s"" % name
""Hello {0}"".format(name)
f""Hello {name}""

# Using named arguments:
""Hello %(kwarg)s"" % {'kwarg': name}
""Hello {kwarg}"".format(kwarg=name)
f""Hello {name}""


When does string formatting run, and how do I avoid a runtime performance penalty?



If you are trying to close a duplicate question that is just looking for a way to format a string, please use How do I put a variable’s value inside a string?.
",
"
I have this DataFrame and want only the records whose EPS column is not NaN:
                 STK_ID  EPS  cash
STK_ID RPT_Date                   
601166 20111231  601166  NaN   NaN
600036 20111231  600036  NaN    12
600016 20111231  600016  4.3   NaN
601009 20111231  601009  NaN   NaN
601939 20111231  601939  2.5   NaN
000001 20111231  000001  NaN   NaN

...i.e. something like df.drop(....) to get this resulting dataframe:
                  STK_ID  EPS  cash
STK_ID RPT_Date                   
600016 20111231  600016  4.3   NaN
601939 20111231  601939  2.5   NaN

How do I do that?
",
"
Is there a method like isiterable? The only solution I have found so far is to call
hasattr(myObj, '__iter__')

But I am not sure how fool-proof this is.
",
"
How do I print the error/exception in the except: block?
try:
    ...
except:
    print(exception)

",
"
I want to write a function that will execute a shell command and return its output as a string, no matter, is it an error or success message. I just want to get the same result that I would have gotten with the command line.
What would be a code example that would do such a thing?
For example:
def run_command(cmd):
    # ??????

print run_command('mysqladmin create test -uroot -pmysqladmin12')
# Should output something like:
# mysqladmin: CREATE DATABASE failed; error: 'Can't create database 'test'; database exists'

",
"
Background
I just upgraded my Pandas from 0.11 to 0.13.0rc1. Now, the application is popping out many new warnings. One of them like this:
E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE

I want to know what exactly it means?  Do I need to change something?
How should I suspend the warning if I insist to use quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE?
The function that gives warnings
def _decode_stock_quote(list_of_150_stk_str):
    """"""decode the webpage and return dataframe""""""

    from cStringIO import StringIO

    str_of_all = """".join(list_of_150_stk_str)

    quote_df = pd.read_csv(StringIO(str_of_all), sep=',', names=list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg')) #dtype={'A': object, 'B': object, 'C': np.float64}
    quote_df.rename(columns={'A':'STK', 'B':'TOpen', 'C':'TPCLOSE', 'D':'TPrice', 'E':'THigh', 'F':'TLow', 'I':'TVol', 'J':'TAmt', 'e':'TDate', 'f':'TTime'}, inplace=True)
    quote_df = quote_df.ix[:,[0,3,2,1,4,5,8,9,30,31]]
    quote_df['TClose'] = quote_df['TPrice']
    quote_df['RT']     = 100 * (quote_df['TPrice']/quote_df['TPCLOSE'] - 1)
    quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
    quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
    quote_df['STK_ID'] = quote_df['STK'].str.slice(13,19)
    quote_df['STK_Name'] = quote_df['STK'].str.slice(21,30)#.decode('gb2312')
    quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])
    
    return quote_df

More warning messages
E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
E:\FinReporter\FM_EXT.py:450: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
E:\FinReporter\FM_EXT.py:453: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])

",
"
How do I find the location of my site-packages directory?
",
"
How to make a Python class serializable?
class FileItem:
    def __init__(self, fname):
        self.fname = fname

Attempt to serialize to JSON:
>>> import json
>>> x = FileItem('/foo/bar')
>>> json.dumps(x)
TypeError: Object of type 'FileItem' is not JSON serializable

",
"







This question already has answers here:
                                
                            




How do I pad a string with zeros?

                                (19 answers)
                            

Closed last year.



How do I display a leading zero for all numbers with less than two digits?
1    →  01
10   →  10
100  →  100

",
"
I have a dictionary where keys are strings, and values are integers.
stats = {'a': 1, 'b': 3000, 'c': 0}

How do I get the key with the maximum value? In this case, it is 'b'.

Is there a nicer approach than using an intermediate list with reversed key-value tuples?
inverse = [(value, key) for key, value in stats.items()]
print(max(inverse)[1])

",
"
How do I make multi-line comments? Most languages have block comment symbols like:
/*

*/

",
"
Apparently, the following is the valid syntax:
b'The string'

I would like to know:

What does this b character in front of the string mean?
What are the effects of using it?
What are appropriate situations to use it?

I found a related question right here on SO, but that question is about PHP though, and it states the b is used to indicate the string is binary, as opposed to Unicode, which was needed for code to be compatible from version of PHP < 6, when migrating to PHP 6. I don't think this applies to Python.
I did find this documentation on the Python site about using a u character in the same syntax to specify a string as Unicode. Unfortunately, it doesn't mention the b character anywhere in that document.
Also, just out of curiosity, are there more symbols than the b and u that do other things?
",
"










                                As it currently stands, this question is not a good fit for our Q&A format. We expect answers to be supported by facts, references, or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question can be improved and possibly reopened, visit the help center for guidance.
                                
                            



Closed 12 years ago.











Locked. This question and its answers are locked because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.
                                
                            






What are the lesser-known but useful features of the Python programming language?

Try to limit answers to Python core.
One feature per answer.
Give an example and short description of the feature, not just a link to documentation.
Label the feature using a title as the first line.

Quick links to answers:

Argument Unpacking
Braces
Chaining Comparison Operators
Decorators
Default Argument Gotchas / Dangers of Mutable Default arguments
Descriptors
Dictionary default .get value
Docstring Tests
Ellipsis Slicing Syntax
Enumeration
For/else
Function as iter() argument
Generator expressions
import this
In Place Value Swapping
List stepping
__missing__ items
Multi-line Regex
Named string formatting
Nested list/generator comprehensions
New types at runtime
.pth files
ROT13 Encoding
Regex Debugging
Sending to Generators
Tab Completion in Interactive Interpreter
Ternary Expression
try/except/else
Unpacking+print() function
with statement

",
"
How do I exit a script early, like the die() command in PHP?
",
"
I have a basic dict as follows:
sample = {}
sample['title'] = ""String""
sample['somedate'] = somedatetimehere

When I try to do jsonify(sample) I get:

TypeError: datetime.datetime(2012, 8, 8, 21, 46, 24, 862000) is not JSON serializable

What can I do such that my dictionary sample can overcome the error above?
Note: Though it may not be relevant, the dictionaries are generated from the retrieval of records out of mongodb where when I print out str(sample['somedate']), the output is 2012-08-08 21:46:24.862000.
",
"







This question already has answers here:
                                
                            




Creating an empty Pandas DataFrame, and then filling it

                                (8 answers)
                            

Closed 6 months ago.



How do I create an empty DataFrame, then add rows, one by one?
I created an empty DataFrame:
df = pd.DataFrame(columns=('lib', 'qty1', 'qty2'))

Then I can add a new row at the end and fill a single field with:
df = df._set_value(index=len(df), col='qty1', value=10.0)

It works for only one field at a time. What is a better way to add new row to df?
",
"
How do I declare a constant in Python?
In Java, we do:
public static final String CONST_NAME = ""Name"";

",
"










Want to improve this post? Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.
                                
                            






When we add a model field in Django we generally write:
models.CharField(max_length=100, null=True, blank=True)

The same is done with ForeignKey, DecimalField etc. What is the basic difference between:

null=True only
blank=True only
null=True and blank=True

in respect to different (CharField, ForeignKey, ManyToManyField, DateTimeField) fields? What are the advantages/disadvantages of using option 1, 2, or 3?
",
"
I want to check if a variable exists. Now I'm doing something like this:
try:
    myVar
except NameError:
    # Do something.

Are there other ways without exceptions?
",
"
Given:
e = 'a' + 'b' + 'c' + 'd'

How do I write the above in two lines?
e = 'a' + 'b' +
    'c' + 'd'


See also: How do I split the definition of a long string over multiple lines? if there is a long string literal in the code that needs to be broken up to wrap the line nicely.
",
"
How do I write a line to a file in modern Python? I heard that this is deprecated:
print >>f, ""hi there""

Also, does ""\n"" work on all platforms, or should I use ""\r\n"" on Windows?
",
"
I have a text file that looks like:
ABC
DEF

How can I read the file into a single-line string without newlines, in this case creating a string 'ABCDEF'?

For reading the file into a list of lines, but removing the trailing newline character from each line, see How to read a file without newlines?.
",
"
I would like to understand how the built-in function property works. What confuses me is that property can also be used as a decorator, but it only takes arguments when used as a built-in function and not when used as a decorator.
This example is from the documentation:
class C:
    def __init__(self):
        self._x = None

    def getx(self):
        return self._x
    def setx(self, value):
        self._x = value
    def delx(self):
        del self._x
    x = property(getx, setx, delx, ""I'm the 'x' property."")

property's arguments are getx, setx, delx and a doc string.
In the code below property is used as a decorator. The object of it is the x function, but in the code above there is no place for an object function in the arguments.
class C:
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """"""I'm the 'x' property.""""""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x

How are the x.setter and x.deleter decorators created in this case?
",
"
I see these at the top of Python files:
#!/usr/bin/env python

#!/usr/bin/env python3

It seems to me that the files run the same without that line.
",
"
How do I iterate over a list in reverse in Python?

See also: How can I get a reversed copy of a list (avoid a separate statement when chaining a method after .reverse)?
",
"
How do I remove leading and trailing whitespace from a string in Python?
"" Hello world "" --> ""Hello world""
"" Hello world""  --> ""Hello world""
""Hello world ""  --> ""Hello world""
""Hello world""   --> ""Hello world""

",
"







This question already has answers here:
                                
                            




Does Python have a ternary conditional operator?

                                (31 answers)
                            

Closed 4 years ago.
The community reviewed whether to reopen this question 2 years ago and left it closed:

Original close reason(s) were not resolved




How do I write an if-then-else statement in Python so that it fits on one line?
For example, I want a one line version of:
if count == N:
    count = 0
else:
    count = N + 1

In Objective-C, I would write this as:
count = count == N ? 0 : count + 1;

",
"
In Programming Python, Mark Lutz mentions the term mixin. I am from a C/C++/C# background and I have not heard the term before. What is a mixin?
Reading between the lines of this example (which I have linked to because it is quite long), I am presuming it is a case of using multiple inheritance to extend a class as opposed to proper subclassing. Is this right?
Why would I want to do that rather than put the new functionality into a subclass? For that matter, why would a mixin/multiple inheritance approach be better than using composition?
What separates a mixin from multiple inheritance? Is it just a matter of semantics?
",
"
I want to get a list of the column headers from a Pandas DataFrame.  The DataFrame will come from user input, so I won't know how many columns there will be or what they will be called.
For example, if I'm given a DataFrame like this:
    y  gdp  cap
0   1    2    5
1   2    3    9
2   8    7    2
3   3    4    7
4   6    7    7
5   4    8    3
6   8    2    8
7   9    9   10
8   6    6    4
9  10   10    7

I would get a list like this:
['y', 'gdp', 'cap']

",
"
Let’s say I have the following Pandas dataframe:
df = DataFrame({'A' : [5,6,3,4], 'B' : [1,2,3, 5]})
df

     A   B
0    5   1
1    6   2
2    3   3
3    4   5

I can subset based on a specific value:
x = df[df['A'] == 3]
x

     A   B
2    3   3

But how can I subset based on a list of values? - something like this:
list_of_values = [3,6]

y = df[df['A'] in list_of_values]

To get:
     A    B
1    6    2
2    3    3

",
"
How does super() work with multiple inheritance? For example, given:
class First(object):
    def __init__(self):
        print ""first""

class Second(object):
    def __init__(self):
        print ""second""

class Third(First, Second):
    def __init__(self):
        super(Third, self).__init__()
        print ""that's it""

Which parent method of Third does super().__init__ refer to? Can I choose which runs?
I know it has something to do with method resolution order (MRO).
",
"
Consider this example:
class MyClass:
    def func(self, name):
        self.name = name

I know that self refers to the specific instance of MyClass. But why must func explicitly include self as a parameter? Why do we need to use self in the method's code? Some other languages make this implicit, or use special syntax instead.

For a language-agnostic consideration of the design decision, see What is the advantage of having this/self pointer mandatory explicit?.
To close debugging questions where OP omitted a self parameter for a method and got a TypeError, use TypeError: method() takes 1 positional argument but 2 were given instead. If OP omitted self. in the body of the method and got a NameError, consider How can I call a function within a class?.
",
"
Which Python library can I use to extract filenames from paths, no matter what the operating system or path format could be?
For example, I'd like all of these paths to return me c:
a/b/c/
a/b/c
\a\b\c
\a\b\c\
a\b\c
a/b/../../a/b/c/
a/b/../../a/b/c

",
"
How do I get the ASCII value of a character as an int in Python?
",
"
What's the best cross-platform way to get file creation and modification dates/times, that works on both Linux and Windows?
",
"
Python is an interpreted language. But why does my source directory contain .pyc files, which are identified by Windows as ""Compiled Python Files""?
",
"
I have the following indexed DataFrame with named columns and rows not- continuous numbers:
          a         b         c         d
2  0.671399  0.101208 -0.181532  0.241273
3  0.446172 -0.243316  0.051767  1.577318
5  0.614758  0.075793 -0.451460 -0.012493

I would like to add a new column, 'e', to the existing data frame and do not want to change anything in the data frame (i.e., the new column always has the same length as the DataFrame).
0   -0.335485
1   -1.166658
2   -0.385571
dtype: float64

How can I add column e to the above example?
",
"
Two string variables are set to the same value. s1 == s2 always returns True, but s1 is s2 sometimes returns False.
If I open my Python interpreter and do the same is comparison, it succeeds:
>>> s1 = 'text'
>>> s2 = 'text'
>>> s1 is s2
True

Why is this?
",
"
Sometimes I download the Python source code from GitHub and don't know how to install all the dependencies. If there isn't any requirements.txt file I have to create it by hand.
Given the Python source code directory, is it possible to create requirements.txt automatically from the import section?
",
"
How do I count the number of occurrences of a character in a string?
e.g. 'a' appears in 'Mary had a little lamb' 4 times.
",
"
With Python 2.7, I can get dictionary keys, values, or items as a list:
>>> newdict = {1:0, 2:0, 3:0}
>>> newdict.keys()
[1, 2, 3]

With Python >= 3.3, I get:
>>> newdict.keys()
dict_keys([1, 2, 3])

How do I get a plain list of keys with Python 3?
",
"
How do I get a line count of a large file in the most memory- and time-efficient manner?
def file_len(filename):
    with open(filename) as f:
        for i, _ in enumerate(f):
            pass
    return i + 1

",
"
How do I uninstall all packages installed by pip from my currently activated virtual environment?
",
"
How do I connect to a MySQL database using a python program?
",
"
I have the following code in Python 3:
class Position:

    def __init__(self, x: int, y: int):
        self.x = x
        self.y = y

    def __add__(self, other: Position) -> Position:
        return Position(self.x + other.x, self.y + other.y)

But my editor (PyCharm) says that the reference Position can not be resolved (in the __add__ method). How should I specify that I expect the return type to be of type Position?
I think this is actually a PyCharm issue. It actually uses the information in its warnings, and code completion.

But correct me if I'm wrong, and need to use some other syntax.
",
"
How do I convert a string into a boolean in Python? This attempt returns True:
>>> bool(""False"")
True

",
"
I want to be able to get the data sent to my Flask app. I've tried accessing request.data but it is an empty string. How do you access request data?
from flask import request

@app.route('/', methods=['GET', 'POST'])
def parse_request():
    data = request.data  # data is empty
    # need posted data here


The answer to this question led me to ask Get raw POST body in Python Flask regardless of Content-Type header next, which is about getting the raw data rather than the parsed data.
",
"
I have two iterables, and I want to go over them in pairs:
foo = [1, 2, 3]
bar = [4, 5, 6]

for (f, b) in iterate_together(foo, bar):
    print(""f:"", f, "" |  b:"", b)

That should result in:
f: 1  |  b: 4
f: 2  |  b: 5
f: 3  |  b: 6

One way to do it is to iterate over the indices:
for i in range(len(foo)):
    print(""f:"", foo[i], "" |  b:"", bar[i])

But that seems somewhat unpythonic to me. Is there a better way to do it?

Related tasks:
* How to merge lists into a list of tuples? - given the above foo and bar, create the list [(1, 4), (2, 5), (3, 6)].
* How can I make a dictionary (dict) from separate lists of keys and values? - create the dict {1: 4, 2: 5, 3: 6}.
* Create a dictionary with comprehension - constructing dict using zip in a dict comprehension.
",
"
How do I import files in Python? I want to import:

a file (e.g. file.py)
a folder
a file dynamically at runtime, based on user input
one specific part of a file (e.g. a single function)

",
"
What is the fastest way to check if a value exists in a very large list (with millions of values) and what its index is?
",
"
I'm having trouble installing a Python package on my Windows machine, and would like to install it with Christoph Gohlke's Window binaries. (Which, to my experience, alleviated much of the fuss for many other package installations). However, only .whl files are available.
http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype
But how do I install .whl files?
Notes

I've found documents on wheel, but they don't seem so staightforward in explaining how to install .whl files.
This question is a duplicate with this question, which wasn't directly answered.

",
"
How do I create a GUID/UUID in Python that is platform independent? I hear there is a method using ActivePython on Windows but it's Windows only because it uses COM. Is there a method using plain Python?
",
"
How do I get a list of Python modules installed on my computer?
",
"
I have two lists in Python:
temp1 = ['One', 'Two', 'Three', 'Four']
temp2 = ['One', 'Two']

Assuming the elements in each list are unique, I want to create a third list with items from the first list which are not in the second list:
temp3 = ['Three', 'Four']

Are there any fast ways without cycles and checking?
",
"
How do I print an integer with commas as thousands separators?
1234567   ⟶   1,234,567

It does not need to be locale-specific to decide between periods and commas.
",
"
How do I represent minimum and maximum values for integers in Python? In Java, we have Integer.MIN_VALUE and Integer.MAX_VALUE.

See also: What is the maximum float in Python?.
",
"
I have a list of Python objects that I want to sort by a specific attribute of each object:
[Tag(name=""toe"", count=10), Tag(name=""leg"", count=2), ...]

How do I sort the list by .count in descending order?
",
"
Should I put the shebang in my Python scripts? In what form?
#!/usr/bin/env python 

or
#!/usr/local/bin/python

Are these equally portable? Which form is used most?
Note: the tornado project uses the shebang. On the other hand the Django project doesn't.
",
"
I want to eliminate all the whitespace from a string, on both ends, and in between words.
I have this Python code:
def my_handle(self):
    sentence = ' hello  apple  '
    sentence.strip()

But that only eliminates the whitespace on both sides of the string. How do I remove all whitespace?
",
"
How does one write a unit test that fails only if a function doesn't throw an expected exception?
",
"
Is there a Python function that will trim whitespace (spaces and tabs) from a string?
So that given input ""  \t example string\t  "" becomes ""example string"".
",
"







Closed. This question is opinion-based. It is not currently accepting answers.
                                
                            











Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.


Closed 5 years ago.


This post was edited and submitted for review 1 year ago and failed to reopen the post:

Original close reason(s) were not resolved






                        Improve this question
                    



The canonical way to return multiple values in languages that support it is often tupling.
Option: Using a tuple
Consider this trivial example:
def f(x):
  y0 = x + 1
  y1 = x * 3
  y2 = y0 ** y3
  return (y0, y1, y2)

However, this quickly gets problematic as the number of values returned increases. What if you want to return four or five values? Sure, you could keep tupling them, but it gets easy to forget which value is where. It's also rather ugly to unpack them wherever you want to receive them.
Option: Using a dictionary
The next logical step seems to be to introduce some sort of 'record notation'. In Python, the obvious way to do this is by means of a dict.
Consider the following:
def g(x):
  y0 = x + 1
  y1 = x * 3
  y2 = y0 ** y3
  return {'y0': y0, 'y1': y1 ,'y2': y2}

(Just to be clear, y0, y1, and y2 are just meant as abstract identifiers. As pointed out, in practice you'd use meaningful identifiers.)
Now, we have a mechanism whereby we can project out a particular member of the returned object. For example,
result['y0']

Option: Using a class
However, there is another option. We could instead return a specialized structure. I've framed this in the context of Python, but I'm sure it applies to other languages as well. Indeed, if you were working in C this might very well be your only option. Here goes:
class ReturnValue:
  def __init__(self, y0, y1, y2):
     self.y0 = y0
     self.y1 = y1
     self.y2 = y2

def g(x):
  y0 = x + 1
  y1 = x * 3
  y2 = y0 ** y3
  return ReturnValue(y0, y1, y2)

In Python the previous two are perhaps very similar in terms of plumbing - after all { y0, y1, y2 } just end up being entries in the internal __dict__ of the ReturnValue.
There is one additional feature provided by Python though for tiny objects, the __slots__ attribute. The class could be expressed as:
class ReturnValue(object):
  __slots__ = [""y0"", ""y1"", ""y2""]
  def __init__(self, y0, y1, y2):
     self.y0 = y0
     self.y1 = y1
     self.y2 = y2

From the Python Reference Manual:

The __slots__ declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because __dict__ is not created for each instance.

Option: Using a dataclass (Python 3.7+)
Using Python 3.7's new dataclasses, return a class with automatically added special methods, typing and other useful tools:
@dataclass
class Returnvalue:
    y0: int
    y1: float
    y3: int

def total_cost(x):
    y0 = x + 1
    y1 = x * 3
    y2 = y0 ** y3
    return ReturnValue(y0, y1, y2)

Option: Using a list
Another suggestion which I'd overlooked comes from Bill the Lizard:
def h(x):
  result = [x + 1]
  result.append(x * 3)
  result.append(y0 ** y3)
  return result

This is my least favorite method though. I suppose I'm tainted by exposure to Haskell, but the idea of mixed-type lists has always felt uncomfortable to me. In this particular example the list is -not- mixed type, but it conceivably could be.
A list used in this way really doesn't gain anything with respect to the tuple as far as I can tell. The only real difference between lists and tuples in Python is that lists are mutable, whereas tuples are not.
I personally tend to carry over the conventions from functional programming: use lists for any number of elements of the same type, and tuples for a fixed number of elements of predetermined types.
Question
After the lengthy preamble, comes the inevitable question. Which method (do you think) is best?
",
"
I need to set some environment variables in the Python script and I want all the other scripts that are called from Python to see the environment variables' set.
If I do,
os.environ[""DEBUSSY""] = 1

it complains saying that 1 has to be a string.
I also want to know how to read the environment variables in Python (in the latter part of the script) once I set it.
",
"







Closed. This question needs to be more focused. It is not currently accepting answers.
                                
                            











Want to improve this question? Update the question so it focuses on one problem only by editing this post.


Closed 7 years ago.


This post was edited and submitted for review last year and failed to reopen the post:

Not suitable for this site






                        Improve this question
                    



I'm building a web application with Django. The reasons I chose Django were:

I wanted to work with free/open-source tools.
I like Python and feel it's a long-term language, whereas regarding Ruby I wasn't sure, and PHP seemed like a huge hassle to learn.
I'm building a prototype for an idea and wasn't thinking too much about the future. Development speed was the main factor, and I already knew Python.
I knew the migration to Google App Engine would be easier should I choose to do so in the future.
I heard Django was ""nice"".

Now that I'm getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I'm not saying anything to disregard them, but this is clearly not objective information...).
Has an independent development team reported building a Django-based site that reliably handles an excess of 100k daily visits?
",
"

What are named tuples and how do I use them?
When should I use named tuples instead of normal tuples, or vice versa?
Are there ""named lists"" too? (i.e. mutable named tuples)


For the last question specifically, see also Existence of mutable named tuple in Python?.
",
"
What is the purpose of __slots__ in Python — especially with respect to when I would want to use it, and when not?
",
"
I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:
os.getenv(""HOME"")

However, this does not work on Windows. What is the correct cross-platform way to do this ?
",
"







This question already has answers here:
                                
                            




Removing duplicates in lists

                                (58 answers)
                            

Closed 5 years ago.



I want to get the unique values from the following list:
['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']

The output which I require is:
['nowplaying', 'PBS', 'job', 'debate', 'thenandnow']

This code works:
output = []
for x in trends:
    if x not in output:
        output.append(x)
print(output)

is there a better solution I should use?
",
"
I work with Series and DataFrames on the terminal a lot. The default __repr__ for a Series returns a reduced sample, with some head and tail values, but the rest missing.
Is there a builtin way to pretty-print the entire Series / DataFrame?  Ideally, it would support proper alignment, perhaps borders between columns, and maybe even color-coding for the different columns.
",
"
I want to remove a value from a list if it exists in the list (which it may not).
a = [1, 2, 3, 4]
b = a.index(6)

del a[b]
print(a)

The above gives the error:
ValueError: list.index(x): x not in list

So I have to do this:
a = [1, 2, 3, 4]

try:
    b = a.index(6)
    del a[b]
except:
    pass

print(a)

But is there not a simpler way to do this?
",
"
Is there any difference between these three methods to remove an element from a list in Python?
a = [1, 2, 3]
a.remove(2)
a               # [1, 3]

a = [1, 2, 3]
del a[1]
a               # [1, 3]

a = [1, 2, 3]
a.pop(1)        # 2
a               # [1, 3]

",
"







This question already has answers here:
                                
                            




How to concatenate (join) items in a list to a single string

                                (12 answers)
                            

Closed 4 years ago.



How can I convert a list to a string using Python?
",
"
How do I concatenate a list of strings into a single string?
For example, given ['this', 'is', 'a', 'sentence'], how do I get ""this-is-a-sentence""?

For handling a few strings in separate variables, see How do I append one string to another in Python?.
For the opposite process - creating a list from a string - see How do I split a string into a list of characters? or How do I split a string into a list of words? as appropriate.
",
"
I have a Python datetime.datetime object. What is the best way to subtract one day?
",
"
How can I convert a list of dictionaries into a DataFrame?
I want to turn
[{'points': 50, 'time': '5:00', 'year': 2010}, 
 {'points': 25, 'time': '6:00', 'month': ""february""}, 
 {'points':90, 'time': '9:00', 'month': 'january'}, 
 {'points_h1':20, 'month': 'june'}]

into
      month  points  points_h1  time  year
0       NaN      50        NaN  5:00  2010
1  february      25        NaN  6:00   NaN
2   january      90        NaN  9:00   NaN
3      june     NaN         20   NaN   NaN

",
"







Closed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.
                                
                            











 We don’t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.


Closed 2 years ago.


The community reviewed whether to reopen this question 2 years ago and left it closed:

Original close reason(s) were not resolved






                        Improve this question
                    



I have tried to puzzle out an answer to this question for many months while learning pandas.  I use SAS for my day-to-day work and it is great for it's out-of-core support.  However, SAS is horrible as a piece of software for numerous other reasons.
One day I hope to replace my use of SAS with python and pandas, but I currently lack an out-of-core workflow for large datasets.  I'm not talking about ""big data"" that requires a distributed network, but rather files too large to fit in memory but small enough to fit on a hard-drive.
My first thought is to use HDFStore to hold large datasets on disk and pull only the pieces I need into dataframes for analysis.  Others have mentioned MongoDB as an easier to use alternative.  My question is this:
What are some best-practice workflows for accomplishing the following:

Loading flat files into a permanent, on-disk database structure
Querying that database to retrieve data to feed into a pandas data structure
Updating the database after manipulating pieces in pandas

Real-world examples would be much appreciated, especially from anyone who uses pandas on ""large data"".
Edit -- an example of how I would like this to work:

Iteratively import a large flat-file and store it in a permanent, on-disk database structure.  These files are typically too large to fit in memory.
In order to use Pandas, I would like to read subsets of this data (usually just a few columns at a time) that can fit in memory.
I would create new columns by performing various operations on the selected columns.
I would then have to append these new columns into the database structure.

I am trying to find a best-practice way of performing these steps. Reading links about pandas and pytables it seems that appending a new column could be a problem.
Edit -- Responding to Jeff's questions specifically:

I am building consumer credit risk models. The kinds of data include phone, SSN and address characteristics; property values; derogatory information like criminal records, bankruptcies, etc... The datasets I use every day have nearly 1,000 to 2,000 fields on average of mixed data types: continuous, nominal and ordinal variables of both numeric and character data.  I rarely append rows, but I do perform many operations that create new columns.
Typical operations involve combining several columns using conditional logic into a new, compound column. For example, if var1 > 2 then newvar = 'A' elif var2 = 4 then newvar = 'B'.  The result of these operations is a new column for every record in my dataset.
Finally, I would like to append these new columns into the on-disk data structure.  I would repeat step 2, exploring the data with crosstabs and descriptive statistics trying to find interesting, intuitive relationships to model.
A typical project file is usually about 1GB.  Files are organized into such a manner where a row consists of a record of consumer data.  Each row has the same number of columns for every record.  This will always be the case.
It's pretty rare that I would subset by rows when creating a new column.  However, it's pretty common for me to subset on rows when creating reports or generating descriptive statistics.  For example, I might want to create a simple frequency for a specific line of business, say Retail credit cards.  To do this, I would select only those records where the line of business = retail in addition to whichever columns I want to report on.  When creating new columns, however, I would pull all rows of data and only the columns I need for the operations.
The modeling process requires that I analyze every column, look for interesting relationships with some outcome variable, and create new compound columns that describe those relationships.  The columns that I explore are usually done in small sets.  For example, I will focus on a set of say 20 columns just dealing with property values and observe how they relate to defaulting on a loan.  Once those are explored and new columns are created, I then move on to another group of columns, say college education, and repeat the process.  What I'm doing is creating candidate variables that explain the relationship between my data and some outcome.  At the very end of this process, I apply some learning techniques that create an equation out of those compound columns.

It is rare that I would ever add rows to the dataset.  I will nearly always be creating new columns (variables or features in statistics/machine learning parlance).
",
"
Using pip, is it possible to figure out which version of a package is currently installed?
I know about pip install XYZ --upgrade but I am wondering if there is anything like pip info XYZ.  If not what would be the best way to tell what version I am currently using.
",
"
How can I convert the str representation of a dictionary, such as the following string, into a dict?
s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}""

I prefer not to use eval. What else can I use?
",
"
Trying to pip install a repo's specific branch. Google tells me to
pip install https://github.com/user/repo.git@branch

The branch's name is issue/34/oscar-0.6 so I did pip  install https://github.com/tangentlabs/django-oscar-paypal.git@/issue/34/oscar-0.6 but its returning a 404.
How do I install this branch?
",
"
I have many rows in XML and I'm trying to get instances of a particular node attribute.
<foo>
   <bar>
      <type foobar=""1""/>
      <type foobar=""2""/>
   </bar>
</foo>

How do I access the values of the attribute foobar? In this example, I want ""1"" and ""2"".
",
"
I have a small utility that I use to download an MP3 file from a website on a schedule and then builds/updates a podcast XML file which I've added to iTunes.
The text processing that creates/updates the XML file is written in Python. However, I use wget inside a Windows .bat file to download the actual MP3 file. I would prefer to have the entire utility written in Python.
I struggled to find a way to actually download the file in Python, thus why I resorted to using wget.
So, how do I download the file using Python?
",
"
What's the difference between tuples/lists and what are their  advantages/disadvantages?
",
"
How can I write a try/except block that catches all exceptions?
",
"







This question already has answers here:
                                
                            




What's the canonical way to check for type in Python?

                                (19 answers)
                            

Closed 4 years ago.
The community reviewed whether to reopen this question 2 years ago and left it closed:

Original close reason(s) were not resolved




How do I check whether a variable is an integer?
",
"
How do I get the size of a file in Python?
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






I'm mainly a C# developer, but I'm currently working on a project in Python.
How can I represent the equivalent of an Enum in Python?  
",
"







Closed. This question is opinion-based. It is not currently accepting answers.
                                
                            



Closed 6 years ago.
The community reviewed whether to reopen this question 2 years ago and left it closed:

Original close reason(s) were not resolved












Locked. This question and its answers are locked because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.
                                
                            






I have seen a few different styles of writing docstrings in Python, what are the most popular styles?
",
"
What is the difference between old style and new style classes in Python?  When should I use one or the other?
",
"
I have a string representing a unix timestamp (i.e. ""1284101485"") in Python, and I'd like to convert it to a readable date. When I use time.strftime, I get a TypeError:
>>>import time
>>>print time.strftime(""%B %d %Y"", ""1284101485"")

Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: argument must be 9-item sequence, not str

",
"
I have a dataframe in pandas which I would like to write to a CSV file.
I am doing this using:
df.to_csv('out.csv')

And getting the following error:
UnicodeEncodeError: 'ascii' codec can't encode character u'\u03b1' in position 20: ordinal not in range(128)


Is there any way to get around this easily (i.e. I have unicode characters in my data frame)?
And is there a way to write to a tab delimited file instead of a CSV using e.g. a 'to-tab' method (that I don't think exists)?

",
"







This question already has answers here:
                                
                            




Check if a given key already exists in a dictionary

                                (16 answers)
                            

Closed last year.



Given:
>>> d = {'a': 1, 'b': 2}

Which of the following is the best way to check if 'a' is in d?
>>> 'a' in d
True

>>> d.has_key('a')
True

",
"
I want to detect whether module has changed. Now, using inotify is simple, you just need to know the directory you want to get notifications from.
How do I retrieve a module's path in python?
",
"
I have a list that I want to filter by an attribute of the items.
Which of the following is preferred (readability, performance, other reasons)?
xs = [x for x in xs if x.attribute == value]

xs = filter(lambda x: x.attribute == value, xs)

",
"
I am getting an 'access is denied' error when I attempt to delete a folder that is not empty. I used the following command in my attempt: os.remove(""/folder_name""). 
What is the most effective way of removing/deleting a folder/directory that is not empty?
",
"
I know pip is a package manager for python packages. However, I saw the installation on IPython's website use conda to install IPython.
Can I use pip to install IPython? Why should I use conda as another python package manager when I already have pip?
What is the difference between pip and conda?
",
"
I have a long-running Python server and would like to be able to upgrade a service without restarting the server. What's the best way do do this?
if foo.py has changed:
    unimport foo  <-- How do I do this?
    import foo
    myfoo = foo.Foo()

",
"
I came across the dict method get which, given a key in the dictionary, returns the associated value.
For what purpose is this function useful? If I wanted to find a value associated with a key in a dictionary, I can just do dict[key], and it returns the same thing:
dictionary = {""Name"": ""Harry"", ""Age"": 17}
dictionary[""Name""] == dictionary.get(""Name"")      # True


See also: Return a default value if a dictionary key is not available 
",
"
I would like to use argparse to parse boolean command-line arguments written as ""--foo True"" or ""--foo False"". For example:
my_program --my_boolean_flag False

However, the following test code does not do what I would like:
import argparse
parser = argparse.ArgumentParser(description=""My parser"")
parser.add_argument(""--my_bool"", type=bool)
cmd_line = [""--my_bool"", ""False""]
parsed_args = parser.parse(cmd_line)

Sadly, parsed_args.my_bool evaluates to True. This is the case even when I change cmd_line to be [""--my_bool"", """"], which is surprising, since bool("""") evalutates to False.
How can I get argparse to parse ""False"", ""F"", and their lower-case variants to be False?
",
"
I am running Python 2.5.
This is my folder tree:
ptdraft/
  nib.py
  simulations/
    life/
      life.py

(I also have __init__.py in each folder, omitted here for readability)
How do I import the nib module from inside the life module? I am hoping it is possible to do without tinkering with sys.path.
Note: The main module being run is in the ptdraft folder.
",
"
How can I parse a YAML file in Python?
",
"
From what I understand, a cache is an encrypted file of similar files.
What do we do with the __pycache__ folder? Is it what we give to people instead of our source code? Is it just my input data? This folder keeps getting created, what it is for? 
",
"
I need to emulate a do-while loop in a Python program. Unfortunately, the following straightforward code does not work:
list_of_ints = [ 1, 2, 3 ]
iterator = list_of_ints.__iter__()
element = None

while True:
  if element:
    print element

  try:
    element = iterator.next()
  except StopIteration:
    break

print ""done""

Instead of ""1,2,3,done"", it prints the following output:
[stdout:]1
[stdout:]2
[stdout:]3
None['Traceback (most recent call last):
', '  File ""test_python.py"", line 8, in <module>
    s = i.next()
', 'StopIteration
']

What can I do in order to catch the 'stop iteration' exception and break a while
loop properly?
An example of why such a thing may be needed is shown below as pseudocode.
State machine:
s = """"
while True :
  if state is STATE_CODE :
    if ""//"" in s :
      tokens.add( TOKEN_COMMENT, s.split( ""//"" )[1] )
      state = STATE_COMMENT
    else :
      tokens.add( TOKEN_CODE, s )
  if state is STATE_COMMENT :
    if ""//"" in s :
      tokens.append( TOKEN_COMMENT, s.split( ""//"" )[1] )
    else
      state = STATE_CODE
      # Re-evaluate same line
      continue
  try :
    s = i.next()
  except StopIteration :
    break

",
"
I need to POST a JSON from a client to a server. I'm using Python 2.7.1 and simplejson. The client is using Requests. The server is CherryPy. I can GET a hard-coded JSON from the server (code not shown), but when I try to POST a JSON to the server, I get ""400 Bad Request"".
Here is my client code:
data = {'sender':   'Alice',
    'receiver': 'Bob',
    'message':  'We did it!'}
data_json = simplejson.dumps(data)
payload = {'json_payload': data_json}
r = requests.post(""http://localhost:8080"", data=payload)

Here is the server code.
class Root(object):

    def __init__(self, content):
        self.content = content
        print self.content  # this works

    exposed = True

    def GET(self):
        cherrypy.response.headers['Content-Type'] = 'application/json'
        return simplejson.dumps(self.content)

    def POST(self):
        self.content = simplejson.loads(cherrypy.request.body.read())

Any ideas?
",
"
This doesn't work:
if cond1 && cond2:

",
"







This question already has answers here:
                                
                            




Create a single executable from a Python project [closed]

                                (3 answers)
                            

Closed 3 years ago.
This post was edited and submitted for review 4 months ago and failed to reopen the post:

Original close reason(s) were not resolved




I'm building a Python application and don't want to force my clients to install Python and modules.
So, is there a way to compile a Python script to be a standalone executable?
",
"
Coming from a C# background the naming convention for variables and methods are usually either camelCase or PascalCase:
// C# example
string thisIsMyVariable = ""a""
public void ThisIsMyMethod()

In Python, I have seen the above but I have also seen snake_case being used:
# python example
this_is_my_variable = 'a'
def this_is_my_function():

Is there a more preferable, definitive coding style for Python?
",
"
How do I get a function's name as a string?
def foo():
    pass

>>> name_of(foo)
""foo""

",
"







This question already has answers here:
                                
                            




How do I reverse a list or loop over it backwards?

                                (38 answers)
                            


How to access the index value in a 'for' loop?

                                (28 answers)
                            

Closed 1 year ago.
The community reviewed whether to reopen this question 1 year ago and left it closed:

Original close reason(s) were not resolved




How do I traverse a list in reverse order in Python? So I can start from collection[len(collection)-1] and end in collection[0].
I also want to be able to access the loop index.
",
"
I installed the Python modules construct and statlib using setuptools:
sudo apt-get install python-setuptools

sudo easy_install statlib
sudo easy_install construct

How do I check their versions from the command line?
",
"
I'm trying to get a Python 3 program to do some manipulations with a text file filled with information. However, when trying to read the file I get the following error:
Traceback (most recent call last):  
  File ""SCRIPT LOCATION"", line NUMBER, in <module>  
    text = file.read()
  File ""C:\Python31\lib\encodings\cp1252.py"", line 23, in decode  
    return codecs.charmap_decode(input,self.errors,decoding_table)[0]
UnicodeDecodeError: 'charmap' codec can't decode byte 0x90 in position 2907500: character maps to `<undefined>`  


After reading this Q&A, see How to determine the encoding of text if you need help figuring out the encoding of the file you are trying to open.
",
"
How do I remove the first item from a list?
[0, 1, 2, 3]   →   [1, 2, 3]

",
"
Given a dictionary like so:
my_map = {'a': 1, 'b': 2}

How can one invert this map to get:
inv_map = {1: 'a', 2: 'b'}

",
"
How do I use pre-increment/decrement operators (++, --), just like in C++?
Why does ++count run, but not change the value of the variable?
",
"
How do I remove duplicates from a list, while preserving order? Using a set to remove duplicates destroys the original order.
Is there a built-in or a Pythonic idiom?
",
"







This question already has answers here:
                                
                            




What's the canonical way to check for type in Python?

                                (19 answers)
                            

Closed 1 year ago.
The community reviewed whether to reopen this question 10 months ago and left it closed:

Original close reason(s) were not resolved




Is there a way to check if the type of a variable in python is a string, like:
isinstance(x,int);

for integer values?
",
"
How do I get the size occupied in memory by an object in Python?
",
"
Given a path such as ""mydir/myfile.txt"", how do I find the file's absolute path in Python? E.g. on Windows, I might end up with:
""C:/example/cwd/mydir/myfile.txt""

",
"
In Python, what are the differences between the urllib, urllib2, urllib3 and requests modules? Why are there three? They seem to do the same thing...
",
"










This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






How can I find all the files in a directory having the extension .txt in python?
",
"







This question already has answers here:
                                
                            




How do I create a directory, and any missing parent directories?

                                (27 answers)
                            

Closed 6 years ago.



Is there a way to get functionality similar to mkdir -p on the shell from within Python.  I am looking for a solution other than a system call.  I am sure the code is less than 20 lines, and I am wondering if someone has already written it?
",
"
I would like to list all files recursively in a directory. I currently have a directory structure like this:

src/main.c
src/dir/file1.c
src/another-dir/file2.c
src/another-dir/nested/files/file3.c

I've tried to do the following:
from glob import glob

glob(os.path.join('src','*.c'))

But this will only get be files directly in the src subfolder, e.g. I get main.c but I will not get file1.c, file2.c etc.
from glob import glob

glob(os.path.join('src','*.c'))
glob(os.path.join('src','*','*.c'))
glob(os.path.join('src','*','*','*.c'))
glob(os.path.join('src','*','*','*','*.c'))

But this is obviously limited and clunky, how can I do this properly?
",
"







This question already has answers here:
                                
                            




What are the differences between the threading and multiprocessing modules?

                                (6 answers)
                            

Closed 4 years ago.



I am trying to understand the advantages of multiprocessing over threading. I know that multiprocessing gets around the Global Interpreter Lock, but what other advantages are there, and can threading not do the same thing?
",
"
How do I convert a datetime.datetime object (e.g., the return value of datetime.datetime.now()) to a datetime.date object in Python?
",
"
I have the following DataFrame:
             daysago  line_race rating        rw    wrating
 line_date                                                 
2007-03-31       62         11     56  1.000000  56.000000
2007-03-10       83         11     67  1.000000  67.000000
2007-02-10      111          9     66  1.000000  66.000000
2007-01-13      139         10     83  0.880678  73.096278
2006-12-23      160         10     88  0.793033  69.786942
2006-11-09      204          9     52  0.636655  33.106077
2006-10-22      222          8     66  0.581946  38.408408
2006-09-29      245          9     70  0.518825  36.317752
2006-09-16      258         11     68  0.486226  33.063381
2006-08-30      275          8     72  0.446667  32.160051
2006-02-11      475          5     65  0.164591  10.698423
2006-01-13      504          0     70  0.142409   9.968634
2006-01-02      515          0     64  0.134800   8.627219
2005-12-06      542          0     70  0.117803   8.246238
2005-11-29      549          0     70  0.113758   7.963072
2005-11-22      556          0     -1  0.109852  -0.109852
2005-11-01      577          0     -1  0.098919  -0.098919
2005-10-20      589          0     -1  0.093168  -0.093168
2005-09-27      612          0     -1  0.083063  -0.083063
2005-09-07      632          0     -1  0.075171  -0.075171
2005-06-12      719          0     69  0.048690   3.359623
2005-05-29      733          0     -1  0.045404  -0.045404
2005-05-02      760          0     -1  0.039679  -0.039679
2005-04-02      790          0     -1  0.034160  -0.034160
2005-03-13      810          0     -1  0.030915  -0.030915
2004-11-09      934          0     -1  0.016647  -0.016647

I need to remove the rows where line_race is equal to 0. What's the most efficient way to do this?
",
"







Closed. This question needs details or clarity. It is not currently accepting answers.
                                
                            











Want to improve this question? Add details and clarify the problem by editing this post.


Closed 3 years ago.


The community reviewed whether to reopen this question 8 months ago and left it closed:

Opinion-based Update the question so it can be answered with facts and citations by editing this post.






                        Improve this question
                    



I've always thought of the if not x is None version to be more clear, but Google's style guide and PEP-8 both use if x is not None. Are there any minor performance differences (I'm assuming not), and is there any case where one really doesn't fit (making the other a clear winner for my convention)?*
*I'm referring to any singleton, rather than just None.

...to compare singletons like
None. Use is  or is not.

",
"







Closed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.
                                
                            











 We don’t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.


Closed 7 years ago.















This question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.
                                
                            






What IDEs (""GUIs/editors"") do others use for Python coding?
",
"
Is there a way to widen the display of output in either interactive or script-execution mode?
Specifically, I am using the describe() function on a Pandas DataFrame.  When the DataFrame is five columns (labels) wide, I get the descriptive statistics that I want.  However, if the DataFrame has any more columns, the statistics are suppressed and something like this is returned:
>> Index: 8 entries, count to max
>> Data columns:
>> x1          8  non-null values
>> x2          8  non-null values
>> x3          8  non-null values
>> x4          8  non-null values
>> x5          8  non-null values
>> x6          8  non-null values
>> x7          8  non-null values

The ""8"" value is given whether there are 6 or 7 columns.  What does the ""8"" refer to?
I have already tried dragging the IDLE window larger, as well as increasing the ""Configure IDLE"" width options, to no avail.
",
"
How do I iterate between 0 and 1 by a step of 0.1?
This says that the step argument cannot be zero:
for i in range(0, 1, 0.1):
    print(i)

",
"







This question already has answers here:
                                
                            




Behaviour of increment and decrement operators in Python

                                (11 answers)
                            


Why are there no ++ and --​ operators in Python?

                                (20 answers)
                            

Closed 4 years ago.



I've always laughed to myself when I've looked back at my VB6 days and thought, ""What modern language doesn't allow incrementing with double plus signs?"":
number++

To my surprise, I can't find anything about this in the Python docs. Must I really subject myself to number = number + 1? Don't people use the ++ / -- notation?
",
"
In a comment on this answer to another question, someone said that they weren't sure what functools.wraps was doing. So, I'm asking this question so that there will be a record of it on StackOverflow for future reference: what does functools.wraps do, exactly?
",
"
The very common directory structure for even a simple Python module seems to be to separate the unit tests into their own test directory:
new_project/
    antigravity/
        antigravity.py
    test/
        test_antigravity.py
    setup.py
    etc.

My question is simply What's the usual way of actually running the tests? I suspect this is obvious to everyone except me, but you can't just run python test_antigravity.py from the test directory as its import antigravity will fail as the module is not on the path.
I know I could modify PYTHONPATH and other search path related tricks, but I can't believe that's the simplest way - it's fine if you're the developer but not realistic to expect your users to use if they just want to check the tests are passing.
The other alternative is just to copy the test file into the other directory, but it seems a bit dumb and misses the point of having them in a separate directory to start with.
So, if you had just downloaded the source to my new project how would you run the unit tests? I'd prefer an answer that would let me say to my users: ""To run the unit tests do X.""
",
"
Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?
",
"
I'm helping a veterinary clinic measuring pressure under a dogs paw. I use Python for my data analysis and now I'm stuck trying to divide the paws into (anatomical) subregions.
I made a 2D array of each paw, that consists of the maximal values for each sensor that has been loaded by the paw over time. Here's an example of one paw, where I used Excel to draw the areas I want to 'detect'. These are 2 by 2 boxes around the sensor with local maxima's, that together have the largest sum.

So I tried some experimenting and decide to simply look for the maximums of each column and row (can't look in one direction due to the shape of the paw). This seems to 'detect' the location of the separate toes fairly well, but it also marks neighboring sensors.

So what would be the best way to tell Python which of these maximums are the ones I want?
Note: The 2x2 squares can't overlap, since they have to be separate toes!
Also I took 2x2 as a convenience, any more advanced solution is welcome, but I'm simply a human movement scientist, so I'm neither a real programmer or a mathematician, so please keep it 'simple'.
Here's a version that can be loaded with np.loadtxt

Results
So I tried @jextee's solution (see the results below). As you can see, it works very on the front paws, but it works less well for the hind legs.
More specifically, it can't recognize the small peak that's the fourth toe. This is obviously inherent to the fact that the loop looks top down towards the lowest value, without taking into account where this is.
Would anyone know how to tweak @jextee's algorithm, so that it might be able to find the 4th toe too?

Since I haven't processed any other trials yet, I can't supply any other samples. But the data I gave before were the averages of each paw. This file is an array with the maximal data of 9 paws in the order they made contact with the plate.
This image shows how they were spatially spread out over the plate.

Update:
I have set up a blog for anyone interested and I have setup a OneDrive with all the raw measurements. So to anyone requesting more data: more power to you!

New update:
So after the help I got with my questions regarding paw detection and paw sorting, I was finally able to check the toe detection for every paw! Turns out, it doesn't work so well in anything but paws sized like the one in my own example. Off course in hindsight, it's my own fault for choosing the 2x2 so arbitrarily.
Here's a nice example of where it goes wrong: a nail is being recognized as a toe and the 'heel' is so wide, it gets recognized twice!

The paw is too large, so taking a 2x2 size with no overlap, causes some toes to be detected twice. The other way around, in small dogs it often fails to find a 5th toe, which I suspect is being caused by the 2x2 area being too large.
After trying the current solution on all my measurements I came to the staggering conclusion that for nearly all my small dogs it didn't find a 5th toe and that in over 50% of the impacts for the large dogs it would find more!
So clearly I need to change it. My own guess was changing the size of the neighborhood to something smaller for small dogs and larger for large dogs. But generate_binary_structure wouldn't let me change the size of the array.
Anyone has a better suggestion for locating the toes, perhaps having the toe area scale with the paw size?
",
"
Is there a built-in method for converting a date to a datetime in Python, for example getting the datetime for the midnight of the given date? The opposite conversion is easy: datetime has a .date() method.
Do I really have to manually call datetime(d.year, d.month, d.day)?
",
"
I would like to know what are all the possible values for the timezone argument in the Python library pytz. How to do it?
",
"
How do you get the logical xor of two variables in Python?
For example, I have two variables that I expect to be strings. I want to test that only one of them contains a True value (is not None or an empty string):
str1 = raw_input(""Enter string one:"")
str2 = raw_input(""Enter string two:"")
if logical_xor(str1, str2):
    print ""ok""
else:
    print ""bad""

The ^ operator is bitwise, and not defined on all objects:
>>> 1 ^ 1
0
>>> 2 ^ 1
3
>>> ""abc"" ^ """"
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for ^: 'str' and 'str'

",
"
How do I convert a hex string to an integer?
""0xffff""   ⟶   65535
""ffff""     ⟶   65535

",
"







Closed. This question needs to be more focused. It is not currently accepting answers.
                                
                            











Want to improve this question? Update the question so it focuses on one problem only by editing this post.


Closed 8 years ago.







                        Improve this question
                    



I'm trying to figure out Python lambdas. Is lambda one of those ""interesting"" language items that in real life should be forgotten?
I'm sure there are some edge cases where it might be needed, but given the obscurity of it, the potential of it being redefined in future releases (my assumption based on the various definitions of it) and the reduced coding clarity - should it be avoided?
This reminds me of overflowing (buffer overflow) of C types - pointing to the top variable and overloading to set the other field values.  It feels like sort of a techie showmanship but maintenance coder nightmare.
",
"
In Django model QuerySets, I see that there is a __gt and __lt for comparative values, but is there a __ne or != (not equals)? I want to filter out using a not equals. For example, for
Model:
    bool a;
    int x;

I want to do
results = Model.objects.exclude(a=True, x!=5)

The != is not correct syntax. I also tried __ne.
I ended up using:
results = Model.objects.exclude(a=True, x__lt=5).exclude(a=True, x__gt=5)

",
"
I want to remove all empty strings from a list of strings in python.
My idea looks like this:
while '' in str_list:
    str_list.remove('')

Is there any more pythonic way to do this?
",
"
How do I write a list to a file? writelines() doesn't insert newline characters, so I need to do:
f.writelines([f""{line}\n"" for line in lines])

",
"
A tweet reads: 

Don't use easy_install, unless you
  like stabbing yourself in the face.
  Use pip.

Why use pip over easy_install? Doesn't the fault lie with PyPI and package authors mostly? If an author uploads crap source tarball (eg: missing files, no setup.py) to PyPI, then both pip and easy_install will fail. Other than cosmetic differences, why do Python people (like in the above tweet) seem to strongly favor pip over easy_install?
(Let's assume that we're talking about easy_install from the Distribute package, that is maintained by the community)
",
"
I have a dataframe that looks like
Year  quarter
2000       q2
2001       q3

How do I add a new column by combining these columns to get the following dataframe?
Year  quarter  period
2000       q2  2000q2
2001       q3  2001q3

",
"
Is there a reason to prefer using map() over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more Pythonic than the other?
",
"
Is there a nicer way than the following to return today's date in the YYYY-MM-DD format?
str(datetime.datetime.today()).split()[0]

",
"







This question already has answers here:
                                
                            




What is the purpose of the `self` parameter? Why is it needed?

                                (26 answers)
                            


Why do we use __init__ in Python classes?

                                (9 answers)
                            

Closed 1 year ago.



I'm learning the Python programming language and I've came across something I don't fully understand. 
In a method like:
def method(self, blah):
    def __init__(?):
        ....
    ....

What does self do?  What is it meant to be?  Is it mandatory?
What does the __init__ method do?  Why is it necessary? (etc.)
I think they might be OOP constructs, but I don't know very much.
",
"
I made a function which will look up ages in a Dictionary and show the matching name:
dictionary = {'george' : 16, 'amber' : 19}
search_age = raw_input(""Provide age"")
for age in dictionary.values():
    if age == search_age:
        name = dictionary[age]
        print name

I know how to compare and find the age I just don't know how to show the name of the person. Additionally, I am getting a KeyError because of line 5. I know it's not correct but I can't figure out how to make it search backwards.
",
"
Is there a way to return a list of all the subdirectories in the current directory in Python?
I know you can do this with files, but I need to get the list of directories instead.
",
"
I have a variable, x, and I want to know whether it is pointing to a function or not.
I had hoped I could do something like:
>>> isinstance(x, function)

But that gives me:
Traceback (most recent call last):
  File ""<stdin>"", line 1, in ?
NameError: name 'function' is not defined

The reason I picked that is because
>>> type(x)
<type 'function'>

",
"
I've recently noticed something interesting when looking at Python 3.3 grammar specification:
funcdef: 'def' NAME parameters ['->' test] ':' suite

The optional 'arrow' block was absent in Python 2 and I couldn't find any information regarding its meaning in Python 3. It turns out this is correct Python and it's accepted by the interpreter:
def f(x) -> 123:
    return x

I thought that this might be some kind of a precondition syntax, but:

I cannot test x here, as it is still undefined,
No matter what I put after the arrow (e.g. 2 < 1), it doesn't affect the function behavior.

Could anyone familiar with this syntax style explain it?
",
"







Closed. This question needs to be more focused. It is not currently accepting answers.
                                
                            











Want to improve this question? Update the question so it focuses on one problem only by editing this post.


Closed 7 years ago.


The community reviewed whether to reopen this question 6 months ago and left it closed:

Original close reason(s) were not resolved






                        Improve this question
                    



Imagine that you want to develop a non-trivial end-user desktop (not web) application in Python. What is the best way to structure the project's folder hierarchy?
Desirable features are ease of maintenance, IDE-friendliness, suitability for source control branching/merging, and easy generation of install packages.
In particular:

Where do you put the source?
Where do you put application startup scripts?
Where do you put the IDE project cruft?
Where do you put the unit/acceptance tests?
Where do you put non-Python data such as config files?
Where do you put non-Python sources such as C++ for pyd/so binary extension modules?

",
"
Can someone explain how these two methods of slicing are different? I've seen the docs
and I've seen previous similar questions (1, 2), but I still find myself unable to understand how they are different. To me, they seem interchangeable in large part, because they are at the lower levels of slicing.
For example, say we want to get the first five rows of a DataFrame.  How is it that these two work?
df.loc[:5]
df.iloc[:5]

Can someone present cases where the distinction in uses are clearer?

Once upon a time, I also wanted to know how these two functions differed from df.ix[:5] but ix has been removed from pandas 1.0, so I don't care anymore.
",
"
What do I need to look at to see whether I'm on Windows or Unix, etc.?
",
"
I can't find a definitive answer for this. As far as I know, you can't have multiple __init__ functions in a Python class. So how do I solve this problem?
Suppose I have a class called Cheese with the number_of_holes property. How can I have two ways of creating cheese objects...

One that takes a number of holes like this: parmesan = Cheese(num_holes=15).
And one that takes no arguments and just randomizes the number_of_holes property: gouda = Cheese().

I can think of only one way to do this, but this seems clunky:
class Cheese:
    def __init__(self, num_holes=0):
        if num_holes == 0:
            # Randomize number_of_holes
        else:
            number_of_holes = num_holes

What do you say? Is there another way?
",
"
I created a list of lists:
>>> xs = [[1] * 4] * 3
>>> print(xs)
[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]

Then, I changed one of the innermost values:
>>> xs[0][0] = 5
>>> print(xs)
[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]

Why did every first element of each sublist change to 5?


See also:

How do I clone a list so that it doesn't change unexpectedly after assignment? for workarounds for the problem

List of dictionary stores only last appended value in every iteration for an analogous problem with a list of dicts

How do I initialize a dictionary of empty lists in Python? for an analogous problem with a dict of lists



",
